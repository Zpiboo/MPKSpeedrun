group = 'io.github.zpiboo.mpkspeedrun'
version = '0.3.0'

tasks.register('buildAll', Jar) {
    description = 'Builds and merges all modules.'
    group = 'build'

    archiveBaseName.set('mpkspeedrun')
    archiveVersion.set(version.toString())

    subprojects.collect() {
        def jarTask = it.tasks.named(it.ext.has('jarTaskName') ? it.ext.get('jarTaskName') : 'jar')
        dependsOn jarTask

        from zipTree(jarTask.get().archiveFile)
    }

    destinationDirectory.set(layout.buildDirectory.dir('libs'))
}

subprojects { Project p ->
    apply plugin: 'java'

    tasks.withType(JavaCompile).configureEach {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
        options.encoding = 'UTF-8'
    }

    repositories {
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        compileOnly 'com.github.MPKMod:MPKMod2:2.0.0'

        if (p.name.startsWith('forge') || p.name.startsWith('fabric')) {
            implementation project(':common-api')
            implementation project(':common')
        }
    }

    p.afterEvaluate {
        if (p.name.startsWith('fabric')) {
            p.ext.jarTaskName = 'remapJar'

            p.tasks.named(p.ext.jarTaskName) {
                dependsOn p.jar

                archiveClassifier.set('remapped')
                destinationDirectory.set(layout.buildDirectory.dir('remappedJar'))

                inputFile.set(p.jar.archiveFile)
            }
        } else if (p.name.startsWith('forge')) {
            p.ext.jarTaskName = 'remapForgeJar'

            p.tasks.named(p.ext.jarTaskName) {
                dependsOn p.tasks.named('forgeJar')

                archiveClassifier.set('remapped')
                destinationDirectory.set(layout.buildDirectory.dir('remappedJar'))
            }
        }
    }
}